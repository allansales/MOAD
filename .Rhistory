row.names = FALSE, col.names = TRUE, sep = "\t")
###############################################################################
############################### DBpedia Load ##################################
###############################################################################
######################### FUNCTIONS ########################
# Function for generating a data.frame containing multiple items grouped in one cell, in DBpedia database, in the format {x|x|...}
dismemberObjects = function(str) {
if(is.na(str))
return(data.frame(NA))
lista = strsplit(str,"|", fixed = T)
if (length(lista[[1]]) > 1) {
lista[[1]][1] = substr(lista[[1]][1],2,nchar(lista[[1]][1]))
lista[[1]][length(lista[[1]])] = substr(lista[[1]][length(lista[[1]])],1,nchar(lista[[1]][length(lista[[1]])])-1)
}
lista = data.frame(lista)
names(lista) = "Items"
return(lista)
}
# combineGenreDataFrame = function(df) {
#   size = nrow(df)
#   for(){
#     for(i in 1:size-1){
#       for(j in i+1:size){
#
#       }
#     }
#   }
# }
#
################################### MusicalArtist ###################################
MusicalArtist = read.csv(paste0(address,"DBpedia/MusicalArtist.csv"), header=TRUE, na.strings="NULL", stringsAsFactors=FALSE, sep = ",")
MusicalArtist.Origin = MusicalArtist[,c(2,26)]
names(MusicalArtist.Origin) = c("Artist","Origin")
MusicalArtist = MusicalArtist[,c(2,48)]
MusicalArtist = MusicalArtist[-(1:3),]
################################### Band ###################################
Band = read.csv(paste0(address,"DBpedia/Band.csv"), header=TRUE, na.strings="NULL", stringsAsFactors=FALSE, sep = ",")
Band.Origin1 = Band[,c(2,23)]
names(Band.Origin1) = c("Artist","Origin")
Band.Origin2 = Band[,c(2,37)]
names(Band.Origin2) = c("Artist","Origin")
Band.Origin = rbind(Band.Origin1,Band.Origin2)
Band = Band[,c(2,34)]
Band = Band[-(1:3),]
################################### Artist = MusicalArtist + Band ###################################
Artist = rbind(MusicalArtist,Band)
Artist = subset(Artist,!is.na(Artist$genre_label))
Artist = subset(Artist,!is.na(Artist$rdf.schema.label))
Artist = subset(Artist,!duplicated(Artist))
names(Artist) = c("Artist","Genre")
# Artist$Artist = tolower(Artist$Artist)
# genres = list of data.frames containing all the genres already splited
genres <- vector("list", nrow(Artist))
for (i in 1:nrow(Artist)) {
genres[[i]] = dismemberObjects(Artist[i,"Genre"])
}
# transform genres in columns of Artist data frame, filled with zeros
genres.all = bind_rows(genres)
genres.all = distinct(genres.all)
genres.total = nrow(genres.all)
genres.all.columns = data.frame(matrix(0,ncol = genres.total, nrow = nrow(Artist)))
names(genres.all.columns) = genres.all$Items
# fill the genre columns of each artist
Artist.genres = bind_cols(Artist,genres.all.columns) # Substituir pela operação tidy, pacote reshape2
for (i in 1:nrow(Artist)) {
for(j in 1:nrow(genres[[i]])) {
Artist.genres[i,as.character(genres[[i]][j,1])] = 1
}
}
Artist.genres[,2] = NULL
# #################################### MUSIC GENRES ############################################
#
# genres.unique = data.frame()
# for( i in 1:length(genres)){
#   genres.unique = bind_rows(genres.unique,genres[[i]])
# }
# genres.unique = unique(genres.unique$Items)
#
#############################################################################################
# write text file with artists and its genres
write.table(Artist.genres, paste0(address,"DBpedia/DBpedia Artist_genres.txt"),row.names = FALSE, col.names = TRUE, sep = "\t")
# Exclude genres that contain only one artist
quant = c(2)
for (i in 2:ncol(Artist.genres)){
quant = c(quant,sum(Artist.genres[,i]))
}
Artist.genres = Artist.genres[,-which(quant<=5)]
###############################################################################
################################# LFM Load ####################################
###############################################################################
######################### USERS #########################
LFM_1b_users <- read_delim(paste0(address,"LFM/LFM-1b_users.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LFM_1b_users) = c("user-id", "country", "age", "gender", "playcount", "registered timestamp")
nUsers = length(unique(LFM_1b_users$`user-id`))
sample_indexes = floor(runif(size_sample, min=1, max=nUsers+1))
sample = LFM_1b_users[sample_indexes,"user-id"]
sample = sort(sample$`user-id`)
write.table(sample, paste0(address,"LFM/sample_users.txt"), sep = "\t", col.names = FALSE, row.names = FALSE)
######################### LEs #########################
# Geração do arquivo LEs_sample.txt com as interações dos usuários contidos no sample realizado em linha de comando linux
# awk -F'\t' 'NR==FNR{check[$0];next} $1 in check' sample_users.txt LFM-1b_LEs.txt > LEs_sample.txt
LEs_sample <- read_delim(paste0(address,"LFM/LEs_sample.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LEs_sample) = c("user-id", "artist-id", "album-id", "track-id", "timestamp")
LFM = merge(LEs_sample, LFM_1b_users, by = "user-id")
######################### ARTISTS #########################
LFM_1b_artists <- read_delim(paste0(address,"LFM/LFM-1b_artists.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LFM_1b_artists) = c("artist-id", "artist-name")
LFM = merge(LFM, LFM_1b_artists, by = "artist-id")
######################### ALBUMS #########################
# LFM_1b_albums <- read_delim(paste0(address,"LFM/LFM-1b_albums.txt"),
#                             "\t", escape_double = FALSE, col_names = FALSE,
#                             trim_ws = TRUE)
# names(LFM_1b_albums) = c("album-id", "album-name", "artist-id")
# LFM_1b_albums$`artist-id` = NULL
#
# LFM = merge(LFM, LFM_1b_albums, by = "album-id")
######################### CLEANING & WRITING #########################
LFM$`track-id` = NULL
LFM$`album-id` = NULL
fwrite(LFM, paste0(address,"LFM/LFM-treated.txt"),row.names = FALSE, col.names = TRUE, sep = ";")
###############################################################################
################################ Data Merge ###################################
###############################################################################
# DBpedia load
DBpedia_Artist_genres <- fread(paste0(address,"DBpedia/DBpedia Artist_genres.txt"),
sep="\t",
verbose = TRUE)
DBpedia_Artist_genres = as.data.frame(DBpedia_Artist_genres)
# Exclude genres that doesn't contain at least 5 artists
min.artists = 5
quant = c(min.artists)
for (i in 2:ncol(DBpedia_Artist_genres)){
quant = c(quant,sum(DBpedia_Artist_genres[,i]))
}
DBpedia_Artist_genres = DBpedia_Artist_genres[,-which(quant<min.artists)]
DBpedia_Artist_genres = DBpedia_Artist_genres[-which(apply(DBpedia_Artist_genres[2:ncol(DBpedia_Artist_genres)],1,sum) == 0),]
# Music Brainz artists load
MB_artists <- fread(paste0(address,"experimento/mb_artists.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
MB_artists = as.data.frame(MB_artists)
colnames(MB_artists) = c("id", "Artist", "type", "area", "debut", "last")
############################
# Modifying contemporaneity aspect
artist.with.debut = merge(MB_artists, artists.debut, by.x = "id", by.y = "artist_credit")
#artist.with.debut$begin_date_year = NULL
#artist.with.debut$end_date_year = NULL
MB_artists = artist.with.debut
# artist.beta = merge(MB_artists, release_with_date, by.x = "id", by.y = "artist_credit")
#
#
#
# artist.beta.duplicated = artist.beta[which(duplicated(artist.beta$Artist)),]
# artist.beta.duplicated.names = unique(artist.beta.duplicated$Artist)
# length(artist.beta.duplicated.names)
# arrange(artist.beta, Artist, )
############################
# Merge Music Brainz and DBpedia
artist.data = inner_join(MB_artists, DBpedia_Artist_genres, by = "Artist")
artist.data.duplicated = artist.data[which(duplicated(artist.data$Artist)),]
artist.data.duplicated.names = unique(artist.data.duplicated$Artist)
x = 0
print(length(artist.data.duplicated.names))
for(i in artist.data.duplicated.names){ #replace this terrible code snippet
x = x + 1
print(x)
df = artist.data[which(artist.data$Artist == i),]
attrib = 0
for(j in 1:nrow(df)){
attrib.line = sum(!is.na(df[j,]))
if(attrib.line > attrib){
attrib = attrib.line
id = df[j,"id"]
}
}
ids.out = setdiff(c(df$id),id)
artist.data = artist.data[-which(artist.data$id %in% ids.out),]
}
artist.data.noNA = artist.data[which(!is.na(artist.data$debut)),]
library(readr)
library(data.table)
library(dplyr)
address <- "/local/datasets/"
size_sample = 1000
release <- read_delim(paste0(address,"MusicBrainz/mbdump/release"),
"\t",
escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE,
na = "\\N")
names(release) = c("id", "gid", "name", "artist_credit", "release_group", "status", "packaging", "language", "script", "barcode",
"comment", "edits_pending", "quality", "last_updated")
release_country <- read_delim(paste0(address,"MusicBrainz/mbdump/release_country"),
"\t",
escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE,
na = "\\N")
names(release_country) <- c("release_id", "country", "date_year", "date_month", "date_day")
release_country$country = NULL
release_unknown_country <- read_delim(paste0(address,"MusicBrainz/mbdump/release_unknown_country"),
"\t",
escape_double = FALSE,
col_names = FALSE,
trim_ws = TRUE,
na = "\\N")
names(release_unknown_country) <- c("release_id", "date_year", "date_month", "date_day")
release_country = rbind(release_country,release_unknown_country)
release_with_date = merge(release, release_country, by.x = "id", by.y = "release_id")
release_with_date = release_with_date[!(is.na(release_with_date$date_year)),]
artists.grouped = group_by(release_with_date, artist_credit)
artists.debut = summarize(artists.grouped, debut = min(date_year))
artists.last = summarize(artists.grouped, last = max(date_year))
artist = fread(paste0(address,"MusicBrainz/mbdump/artist"),
sep="\t",
verbose = TRUE,
na.strings = "\\N")
names(artist) = c("id", "gid", "name", "sort_name", "begin_date_year", "begin_date_month", "begin_date_day", "end_date_year",
"end_date_month", "end_date_day", "type", "area", "gender", "comment", "edits_pending", "last_updated",
"ended_char", "begin_area", "end_area")
artist = artist[,c(1, 3, 11, 12)]
artist = merge(artist, artists.debut, by.x = "id", by.y = "artist_credit")
artist = merge(artist, artists.last, by.x = "id", by.y = "artist_credit")
fwrite(artist,
paste0(address,"experimento/mb_artists.txt"),
row.names = FALSE, col.names = TRUE, sep = "\t")
dismemberObjects = function(str) {
if(is.na(str))
return(data.frame(NA))
lista = strsplit(str,"|", fixed = T)
if (length(lista[[1]]) > 1) {
lista[[1]][1] = substr(lista[[1]][1],2,nchar(lista[[1]][1]))
lista[[1]][length(lista[[1]])] = substr(lista[[1]][length(lista[[1]])],1,nchar(lista[[1]][length(lista[[1]])])-1)
}
lista = data.frame(lista)
names(lista) = "Items"
return(lista)
}
MusicalArtist = read.csv(paste0(address,"DBpedia/MusicalArtist.csv"), header=TRUE, na.strings="NULL", stringsAsFactors=FALSE, sep = ",")
MusicalArtist.Origin = MusicalArtist[,c(2,26)]
names(MusicalArtist.Origin) = c("Artist","Origin")
MusicalArtist = MusicalArtist[,c(2,48)]
MusicalArtist = MusicalArtist[-(1:3),]
Band = read.csv(paste0(address,"DBpedia/Band.csv"), header=TRUE, na.strings="NULL", stringsAsFactors=FALSE, sep = ",")
Band.Origin1 = Band[,c(2,23)]
names(Band.Origin1) = c("Artist","Origin")
Band.Origin2 = Band[,c(2,37)]
names(Band.Origin2) = c("Artist","Origin")
Band.Origin = rbind(Band.Origin1,Band.Origin2)
Band = Band[,c(2,34)]
Band = Band[-(1:3),]
Artist = rbind(MusicalArtist,Band)
Artist = subset(Artist,!is.na(Artist$genre_label))
Artist = subset(Artist,!is.na(Artist$rdf.schema.label))
Artist = subset(Artist,!duplicated(Artist))
names(Artist) = c("Artist","Genre")
genres <- vector("list", nrow(Artist))
for (i in 1:nrow(Artist)) {
genres[[i]] = dismemberObjects(Artist[i,"Genre"])
}
genres.all = bind_rows(genres)
genres.all = distinct(genres.all)
genres.total = nrow(genres.all)
genres.all.columns = data.frame(matrix(0,ncol = genres.total, nrow = nrow(Artist)))
names(genres.all.columns) = genres.all$Items
Artist.genres = bind_cols(Artist,genres.all.columns) # Substituir pela operação tidy, pacote reshape2
for (i in 1:nrow(Artist)) {
for(j in 1:nrow(genres[[i]])) {
Artist.genres[i,as.character(genres[[i]][j,1])] = 1
}
}
Artist.genres[,2] = NULL
write.table(Artist.genres, paste0(address,"DBpedia/DBpedia Artist_genres.txt"),row.names = FALSE, col.names = TRUE, sep = "\t")
quant = c(2)
for (i in 2:ncol(Artist.genres)){
quant = c(quant,sum(Artist.genres[,i]))
}
Artist.genres = Artist.genres[,-which(quant<=5)]
LFM_1b_users <- read_delim(paste0(address,"LFM/LFM-1b_users.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LFM_1b_users) = c("user-id", "country", "age", "gender", "playcount", "registered timestamp")
nUsers = length(unique(LFM_1b_users$`user-id`))
sample_indexes = floor(runif(size_sample, min=1, max=nUsers+1))
sample = LFM_1b_users[sample_indexes,"user-id"]
sample = sort(sample$`user-id`)
write.table(sample, paste0(address,"LFM/sample_users.txt"), sep = "\t", col.names = FALSE, row.names = FALSE)
LEs_sample <- read_delim(paste0(address,"LFM/LEs_sample.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LEs_sample) = c("user-id", "artist-id", "album-id", "track-id", "timestamp")
LFM = merge(LEs_sample, LFM_1b_users, by = "user-id")
LFM_1b_artists <- read_delim(paste0(address,"LFM/LFM-1b_artists.txt"),
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(LFM_1b_artists) = c("artist-id", "artist-name")
LFM = merge(LFM, LFM_1b_artists, by = "artist-id")
LFM$`track-id` = NULL
LFM$`album-id` = NULL
fwrite(LFM, paste0(address,"LFM/LFM-treated.txt"),row.names = FALSE, col.names = TRUE, sep = ";")
DBpedia_Artist_genres <- fread(paste0(address,"DBpedia/DBpedia Artist_genres.txt"),
sep="\t",
verbose = TRUE)
DBpedia_Artist_genres = as.data.frame(DBpedia_Artist_genres)
min.artists = 5
quant = c(min.artists)
for (i in 2:ncol(DBpedia_Artist_genres)){
quant = c(quant,sum(DBpedia_Artist_genres[,i]))
}
DBpedia_Artist_genres = DBpedia_Artist_genres[,-which(quant<min.artists)]
DBpedia_Artist_genres = DBpedia_Artist_genres[-which(apply(DBpedia_Artist_genres[2:ncol(DBpedia_Artist_genres)],1,sum) == 0),]
MB_artists <- fread(paste0(address,"experimento/mb_artists.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
MB_artists = as.data.frame(MB_artists)
colnames(MB_artists) = c("id", "Artist", "type", "area", "debut", "last")
artist.with.debut = merge(MB_artists, artists.debut, by.x = "id", by.y = "artist_credit")
artist.data = inner_join(MB_artists, DBpedia_Artist_genres, by = "Artist")
artist.data.duplicated = artist.data[which(duplicated(artist.data$Artist)),]
artist.data.duplicated.names = unique(artist.data.duplicated$Artist)
x = 0
print(length(artist.data.duplicated.names))
for(i in artist.data.duplicated.names){ #replace this terrible code snippet
x = x + 1
print(x)
df = artist.data[which(artist.data$Artist == i),]
attrib = 0
for(j in 1:nrow(df)){
attrib.line = sum(!is.na(df[j,]))
if(attrib.line > attrib){
attrib = attrib.line
id = df[j,"id"]
}
}
ids.out = setdiff(c(df$id),id)
artist.data = artist.data[-which(artist.data$id %in% ids.out),]
}
artist.data.noNA = artist.data[which(!is.na(artist.data$debut)),]
artist.data.noNA = artist.data.noNA[which(!is.na(artist.data.noNA$area)),]
artist.data.noNA = artist.data.noNA[which(!is.na(artist.data.noNA$type)),]
artist.data.noNA = artist.data.noNA[which(!is.na(artist.data.noNA$last)),]
fwrite(artist.data.noNA, paste0(address,"experimento/artist.data.txt"),
row.names = FALSE,
col.names = TRUE,
sep = ";")
LFM <- fread(paste0(address,"LFM/LFM-treated.txt"),
sep = ";",
verbose = TRUE)
artists.available = unique(artist.data.noNA$Artist)
LFM.artists.available = LFM[which(LFM$`artist-name` %in% artists.available),]
fwrite(LFM.artists.available,
paste0(address,"experimento/LFM.artists.available.txt"),
row.names = FALSE, col.names = TRUE, sep = "\t", quote = TRUE)
which(Artist$Artist == "Pink Floyd")
which(Artist$Artist == "David Bowie")
which(Artist$Artist == "The Supremes")
paste0(address,"experimento/LFM.artists.available.txt")
artist.data <- fread(paste0(address,"experimento/LFM.artists.available.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
artist.data = as.data.frame(artist.data)
library(readr)
library(data.table)
library(dplyr)
########################## CONSTANTS ##########################
address <- "/local/datasets/"
size_sample = 1000
LFM <- fread(paste0(address,"experimento/LFM.artists.available.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
LFM = as.data.frame(LFM)
paste0(address,"experimento/artist.data.txt")
artist.data <- fread(paste0(address,"experimento/LFM.artists.available.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
artist.data = as.data.frame(artist.data)
artist.data <- fread(paste0(address,"experimento/artist.data.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
artist.data = as.data.frame(artist.data)
LFM <- fread(paste0(address,"experimento/LFM.artists.available.txt"),
sep = ";",
verbose = TRUE,
na.strings = "")
LFM = as.data.frame(LFM)
artist.data <- fread(paste0(address,"experimento/artist.data.txt"),
sep = ";",
verbose = TRUE,
na.strings = "")
artist.data = as.data.frame(artist.data)
LFM <- fread(paste0(address,"experimento/LFM.artists.available.txt"),
sep = "\t",
verbose = TRUE,
na.strings = "")
LFM = as.data.frame(LFM)
length(artist.data)
not.genre.attibutes+1
not.genre.attibutes = 6
genres = names(artist.data)[not.genre.attibutes+1:length(artist.data)]
genres
names(artist.data)
genres
genres = names(artist.data)[(not.genre.attibutes+1):length(artist.data)]
genres
users = unique(LFM$`user-id`)
u=users[1]
u
Iu = LFM[(which(LFM$`user-id` == u)),]
View(Iu)
install.packages("entropy")
install.packages("entropy-package")
setwd("/local/Scripts/word2vec/MOAD")
setwd("/local/Scripts/word2vec/MOAD")
library("readr")
library("readr")
library("wordVectors")
library("readr")
library("wordVectors")
library("rword2vec")
dist = distance(file_name = "data/artistas_embeddings.bin", search_word = "Zeca_Pagodinho",num = 20)
dist
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "The_Beatles Oasis Ramones", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "The_Beatles The_Rolling_Stones Ramones", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd Yes The_Beatles", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd King_Krimson The_Beatles", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Zeca_Pagodinho", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Shakira", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Beyonce", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Beyoncé", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Rihanna", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Bob_Marley", num = 20)
word_analogy(file_name = "data/artistas_embeddings.bin", search_words = "Pink_Floyd The_Beatles Mercedes_Sosa", num = 20)
library("readr")
library("wordVectors")
library("rword2vec")
cria_word_embedding <- function(tema, texto, path_saida, n_layers = 300, window_size){
train_file = paste(path_saida,tema,".csv",sep="")
binary_file = paste(path_saida,tema,".bin",sep="")
texto %>% write.table(train_file, row.names = F, fileEncoding = "UTF-8", quote = F, col.names = F, sep = " ")
modelo = train_word2vec(train_file, threads = 8, vectors = n_layers, window = window_size) # Maximal 63489
file.remove(train_file)
### Cria tsv com embedding
#path_modelo_tsv = paste(path_saida,tema,".tsv",sep="")
#modelo@.Data %>% as.data.frame() %>% write_tsv(path_modelo_tsv)
#path_modelo_names_tsv = paste(path_saida,tema,"_names",".tsv",sep="")
#modelo@.Data %>% rownames() %>% as.data.frame() %>% write_tsv(path_modelo_names_tsv)
return(modelo)
}
path = "data/"
window_size = 63489
texto = read_delim("data/LFM.byUser.txt", delim = ",", col_names = F)
#modelo = cria_word_embedding("artistas_embeddings", texto, path, window_size)
View(texto)
library("dplyr")
library("wordVectors")
library("partitions")
expand.grid()
?expand.grid
library("dplyr")
library("wordVectors")
# #library("partitions")
# library("gtools")
# #library("purrr")
# library("perm")
cosSim_model <- function(w1, w2, modelo){
cosineSimilarity(modelo[[w1]],modelo[[w2]]) %>% as.numeric()
}
create_pares <- function(x, y=NULL, a, b, modelo){
targets = x
if(!is.null(y)){
targets = c(x, y)
}
features = c(a, b)
pares = expand.grid(target = targets, feature = features)
pares$target = pares$target %>% as.character()
pares$feature = pares$feature %>% as.character()
pares = pares %>%
rowwise() %>%
mutate(cos_sim = cosSim_model(target, feature, modelo))
targets_a = pares %>% filter(feature %in% a)
targets_b = pares %>% filter(feature %in% b)
return(list(targets_a = targets_a, targets_b = targets_b))
}
dist = distance(file_name = "data/artistas_embeddings.bin", search_word = "Zeca_Pagodinho",num = 20)
library("readr")
library("wordVectors")
library("rword2vec")
dist = distance(file_name = "data/artistas_embeddings.bin", search_word = "Zeca_Pagodinho",num = 20)
dist
modelo = read.binary.vectors("data/artistas_embeddings.bin")
create_pares(c("Zeca_Pagodinho", "Peal_Jam"), c("U2", "The_Beatles"), c("Marcelo_D2","Paulinho_Moska"), c("Cartola","Tom_Zé"), modelo)
dist = distance(file_name = "data/artistas_embeddings.bin", search_word = "U2",num = 20)
dist
create_pares(c("Jimi_Hendrix", "Cidade_Negra"), c("U2", "The_Beatles"), c("Marcelo_D2","Paulinho_Moska"), c("Cartola","Tom_Zé"), modelo)
source('~/workspace/RecSys/dist_pair_of_words.R', echo=TRUE)
dists
View(dist)
dists = create_pares(c("Jimi_Hendrix", "Cidade_Negra"), c("U2", "The_Beatles"), c("Marcelo_D2","Paulinho_Moska"), c("Cartola","Tom_Zé"), modelo)
dists
dists$targets_a
